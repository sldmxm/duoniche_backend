"""create_user_bot_profiles_table

Revision ID: 01bac1711dad
Revises: a3568e9dd341
Create Date: 2025-05-05 21:59:35.187667

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from app.core.entities.user_bot_profile import BotID, UserStatusInBot

# revision identifiers, used by Alembic.
revision: str = '01bac1711dad'
down_revision: Union[str, None] = 'a3568e9dd341'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_bot_profiles',
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('bot_id', sa.Enum('BG', name='bot_id_enum'), nullable=False),
                    sa.Column('status', sa.Enum('ACTIVE', 'BLOCKED', 'INACTIVE', name='user_status_in_bot_enum'),
                              nullable=False),
                    sa.Column('reason', sa.String(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'),
                              nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', 'bot_id')
                    )
    op.create_index(op.f('ix_user_bot_profiles_bot_id'), 'user_bot_profiles', ['bot_id'], unique=False)
    op.create_index(op.f('ix_user_bot_profiles_status'), 'user_bot_profiles', ['status'], unique=False)
    op.create_index(op.f('ix_user_bot_profiles_user_id'), 'user_bot_profiles', ['user_id'], unique=False)

    ### Data migration
    users_table = sa.table(
        'users',
        sa.column('user_id', sa.Integer),
        sa.column('target_language', sa.String),
    )

    user_bot_profiles_table = sa.table(
        'user_bot_profiles',
        sa.column('user_id', sa.Integer),
        sa.column('bot_id', sa.Enum(BotID, name='bot_id_enum', create_type=False)),
        sa.column('status', sa.Enum(UserStatusInBot, name='user_status_in_bot_enum', create_type=False)),
    )

    source_default_bot_id_str = BotID.BG.value
    source_default_status_str = UserStatusInBot.ACTIVE.value

    target_bot_id_label_bg = 'BG'
    target_status_label_active = 'ACTIVE'

    op.execute(
        user_bot_profiles_table.insert().from_select(
            [
                'user_id',
                'bot_id',
                'status',
            ],
            sa.select(
                users_table.c.user_id,
                sa.cast(
                    sa.case(
                        (
                            sa.func.coalesce(
                                users_table.c.target_language,
                                source_default_bot_id_str
                            ) == BotID.BG.value,
                            sa.literal(BotID.BG.name)),
                        else_=sa.literal(target_bot_id_label_bg)
                    ),
                    # Cast the result of the CASE statement to the DB enum type
                    sa.Enum(BotID, name='bot_id_enum', create_type=False)
                ).label('bot_id'),

                # Do the same mapping for status: 'active' -> 'ACTIVE'
                sa.cast(
                    sa.case(
                        (sa.literal(source_default_status_str) == 'active',
                         sa.literal(target_status_label_active)),
                        # Add mappings for 'blocked' -> 'BLOCKED' if needed later
                        else_=sa.literal(target_status_label_active)  # Fallback
                    ),
                    sa.Enum(UserStatusInBot, name='user_status_in_bot_enum', create_type=False)
                ).label('status'),

            ).select_from(users_table)
        )
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_bot_profiles_user_id'), table_name='user_bot_profiles')
    op.drop_index(op.f('ix_user_bot_profiles_status'), table_name='user_bot_profiles')
    op.drop_index(op.f('ix_user_bot_profiles_bot_id'), table_name='user_bot_profiles')
    op.drop_table('user_bot_profiles')
    op.execute("DROP TYPE bot_id_enum;")
    op.execute("DROP TYPE user_status_in_bot_enum;")
    # ### end Alembic commands ###
