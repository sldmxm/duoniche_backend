from abc import ABC, abstractmethod
from typing import Optional

from app.core.entities.payment import Payment


class PaymentRepository(ABC):
    """
    Abstract base class for payment data persistence.
    Defines the contract for payment repository implementations.
    """

    @abstractmethod
    async def create_payment(self, payment_data: Payment) -> Payment:
        """
        Creates a new payment record.

        Args:
            payment_data: A Payment entity instance with data for
                        the new payment.
                          The 'payment_id' might be None if it's
                          auto-generated by the DB.

        Returns:
            The created Payment entity, potentially with the
            'payment_id' populated.

        Raises:
            # Consider specific exceptions for repository errors, e.g.,
            # DuplicatePaymentError if a payment with the same
            # telegram_payment_charge_id already exists.
            # For now, we'll rely on service-level handling
            # or generic DB exceptions.
        """
        raise NotImplementedError

    @abstractmethod
    async def get_payment_by_charge_id(
        self, telegram_payment_charge_id: str
    ) -> Optional[Payment]:
        """
        Retrieves a payment by its Telegram payment charge ID.

        Args:
            telegram_payment_charge_id: The unique charge ID from Telegram.

        Returns:
            A Payment entity if found, otherwise None.
        """
        raise NotImplementedError
